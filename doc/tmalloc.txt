In our thread-based model, each thread calls mmap() to grab it's own memory,
and sets %rbp the base of that memory.

The tmalloc(symbol,$bytes) macro "reserves" space in that memory. It defines
'symbol' to be [rbp+bytes].

So, for example:

tmalloc(crap,8)
tmalloc(shit,16)
tmalloc(moreshit,32)

crap is "rbp"
shit is "rbp+8"
moreshit is "rbp+24"

This is fantastic for several reasons:
	1) We get to refer to these things by name, instead of offsets of rbp
	2) If we decide to add something later that needs memory, we can just
	   add a tmalloc() for it, and everything else will magically be adjusted
	3) We can make mmap() allocate the thread block based on how much we tmalloc()

It's a little confusing, because it looks like malloc() but is a macro... but it's
easy enough to understand, and you rarely if ever have to treat the resulting labels
any differently than if they were defined in .data
